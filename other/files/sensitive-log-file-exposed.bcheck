metadata:
    language: v2-beta
    name: "Sensitive Log File Exposed"
    description: "Tests for exposed Log file config in current path and at the root directory of site"
    author: "j3ssie"
    tags: "exposure", "sensitive", "config", "log-file"

define:
    garbage_path = `/hopefullyget404.log`
    issueName = `Sensitive Log File`

run for each:
    # you could add more values to this list to make the check repeat
    sensitive_path =
        "0.log",
        "00000000000000000000.log",
        "001.log",
        "00check.log",
        "Access.log",
        "Accuracy.log",
        "CMakeError.log",
        "CMakeOutput.log",
        "Change.log",
        "Check.log",
        "DEEP.log",
        "Default-build.log",
        "Default-build.log.log",
        "Default-exec.log",
        "Default-exec.log.log",
        "EdgeCase.log",
        "Error.log",
        "Form1.log",
        "JJPHP_Log.log",
        "LastBuild.log",
        "LastTest.log",
        "LastTestsFailed.log",
        "Nexus_5.log",
        "NuGet.log",
        "OGLdpf.log",
        "ObjDetect.log",
        "Ogre.log",
        "PARAM.log",
        "PayPal.log",
        "Project.log",
        "R.log",
        "Train.log",
        "VMProblem.log",
        "VSND.log",
        "WarningsAndErrors.log",
        "XNN.log",
        "Xorg.0.log",
        "__console.log",
        "__mysql_errors.log",
        "a.log",
        "abc.log",
        "acces.log",
        "access.log",
        "address.wast.log",
        "adhearsion.log",
        "af_moderncv_resume.log",
        "all.log",
        "allegro.log",
        "ansible.log",
        "ap_DevDebugProjectContainerCompiler.log",
        "apache.log",
        "apacheAccess.log",
        "apacheError.log",
        "api.log",
        "app.log",
        "appDevDebugProjectContainerCompiler.log",
        "application.log",
        "audit.log",
        "auth.log",
        "automake.log",
        "autoscan-2.69.log",
        "autoscan.log",
        "b.log",
        "backup.log",
        "basic.log",
        "bbfs.log",
        "beamer.log",
        "bem.log",
        "bench.log",
        "benchmark.log",
        "benchmarks.log",
        "bgpd.log",
        "bogus.log",
        "bootstrap.log",
        "bot.log",
        "browser-exceptions.log",
        "buiderror.log",
        "build.log",
        "buildRunner.log",
        "buildRunner2.log",
        "builderror.log",
        "c.log",
        "cache.log",
        "cadena.log",
        "cerr.log",
        "change.log",
        "changelog.log",
        "changes.log",
        "chat.log",
        "check.log",
        "chromedriver.log",
        "client.log",
        "colors.log",
        "commands.log",
        "comments.log",
        "common-error.log",
        "common.log",
        "comp130essay.log",
        "compare.log",
        "compile.log",
        "config.log",
        "configure-wrapper.log",
        "configure.log",
        "conn.log",
        "connect.log",
        "connection.log",
        "console.log",
        "convert.log",
        "coregen.log",
        "coverage-error.log",
        "cp.log",
        "cp1.log",
        "cp2.log",
        "crash.log",
        "cron.log",
        "csp.log",
        "ct2ctml.log",
        "cups.log",
        "custom.log",
        "daemon.log",
        "data.log",
        "database.log",
        "datanucleus.log",
        "db-1.log",
        "db.log",
        "debhelper.log",
        "debug.log",
        "debug_ssl.log",
        "default-centos-64.log",
        "default.log",
        "demo.log",
        "demo2.log",
        "dep.log",
        "deploy.log",
        "deployment.log",
        "derby.log",
        "dest1.log",
        "detail.log",
        "dev.log",
        "developement.log",
        "development.log",
        "dfsmetrics.log",
        "django.log",
        "dmesg.log",
        "dnsmasq.log",
        "dnsspoof.log",
        "doc.log",
        "doit.log",
        "dovecot.index.log",
        "doxygen.log",
        "drone.log",
        "drv.log",
        "dummy.log",
        "e.log",
        "edb.log",
        "edb00001.log",
        "edb00002.log",
        "edbtmp.log",
        "egg-agent.log",
        "egg-web.log",
        "elaboration.log",
        "empty.log",
        "engine_yard.log",
        "envoy.log",
        "err.log",
        "error.log",
        "errors.log",
        "event.log",
        "events.log",
        "everything.log",
        "example.log",
        "exception.log",
        "exceptions.log",
        "execution.log",
        "exit.log",
        "expected.log",
        "fail.log",
        "fake-gps-data.log",
        "fake.access.log",
        "fan.log",
        "figwheel_server.log",
        "file.log",
        "files.log",
        "firebase-debug.log",
        "fit.log",
        "flights.log",
        "fml-client-1.log",
        "foo.log",
        "framerps.log",
        "fuse.log",
        "game.log",
        "games.log",
        "gc.log",
        "gc1.log",
        "gc2.log",
        "gc3.log",
        "geckodriver.log",
        "ghostdriver.log",
        "git.log",
        "git_for_ro_code.log",
        "global-build.log",
        "goldenrun.log",
        "gps.log",
        "gradle.log",
        "gunicorn_supervisor.log",
        "gurobi.log",
        "hadoop_build.log",
        "hello.log",
        "history.log",
        "http.log",
        "httpd.log",
        "imDatabase.log",
        "imMaxSession.log",
        "imServer.log",
        "images.log",
        "import.log",
        "imports.wast.log",
        "index.log",
        "info.log",
        "input.log",
        "install.log",
        "intro.log",
        "invalid_chars.log",
        "inxi.log",
        "isim.log",
        "isimcrash.log",
        "isimkernel.log",
        "jepsen.log",
        "jmeter.log",
        "jmimemagic.log",
        "joChess.log",
        "journal.log",
        "json.log",
        "juggernaut.log",
        "jvmmetrics.log",
        "kern.clean.log",
        "kernel.log",
        "kitchen.log",
        "ksync.log",
        "lab4.build.log",
        "laravel.log",
        "lastrun.log",
        "latest.log",
        "latestrun.log",
        "latin1.log",
        "launch4j.log",
        "libpeerconnection.log",
        "license.log",
        "link_err.log",
        "list.log",
        "localhost_wp_.log",
        "log.log",
        "log1.log",
        "log2.log",
        "log3.log",
        "log4j.log",
        "logfile.log",
        "logger.log",
        "loging.log",
        "logs.log",
        "long_file.log",
        "lpclink.log",
        "lpclink2.log",
        "lscpu.log",
        "luadoc.log",
        "mail.log",
        "main.log",
        "make.log",
        "manager.2013-11-23.log",
        "manual.log",
        "map.log",
        "master.log",
        "matcalc-dev.debhelper.log",
        "matcalc0.debhelper.log",
        "mccExcludedFiles.log",
        "merb_test.log",
        "merb_test_log.log",
        "message.log",
        "messages.log",
        "microblog.log",
        "migration.log",
        "missfont.log",
        "mix.log",
        "mkmf.log",
        "mm.log",
        "mock_multiple_responses_spec.log",
        "mock_one_response_spec.log",
        "mod.log",
        "moduleparser_command.log",
        "moke.log",
        "mongo.log",
        "mongodb.log",
        "monitor.log",
        "mpd.log",
        "mrmetrics.log",
        "mxunit-test.log",
        "my.log",
        "myapp.log",
        "mylog.log",
        "mysql.log",
        "mysql_build.log",
        "nagios.log",
        "named.conf.log",
        "named.log",
        "nasm.build.log",
        "nasm_sw1.build.log",
        "nestest.log",
        "neverdie.log",
        "newrelic_agent.log",
        "nginx.error.log",
        "nginx.log",
        "node_1.log",
        "non-object-res.log",
        "notes.log",
        "notice.log",
        "npm-debug.log",
        "ntp.log",
        "nweb.log",
        "offsetlogs.cracking-ignore.log",
        "one.log",
        "origin.log",
        "other_vhosts_access.log",
        "out.log",
        "out0.log",
        "out1.log",
        "output.log",
        "packet_filter.log",
        "paper.log",
        "particicle.log",
        "passenger.3000.log",
        "pbc.log",
        "pdebuild-internal-lenny.log",
        "pdebuild-internal-sid.log",
        "pdebuild-normal-lenny.log",
        "pdebuild-normal-sid.log",
        "pdebuild-normal-squeeze.log",
        "perf.log",
        "performance.log",
        "phantomjsdriver.log",
        "php.log",
        "php_error.log",
        "php_errors.log",
        "ping.log",
        "pip.log",
        "planAhead.log",
        "planAhead.ngc2edif.log",
        "planAhead_run.log",
        "plcemu.log",
        "poc.log",
        "portstats.log",
        "power.log",
        "proc_diskstats.log",
        "proc_ps.log",
        "proc_stat.log",
        "process.log",
        "prod.log",
        "production.log",
        "production_rails_2_3.log",
        "production_rails_3_0.log",
        "production_rails_4_1.log",
        "production_rails_oink_2_2.log",
        "profile.log",
        "progress.log",
        "project.log",
        "property.log",
        "proxy.log",
        "proxy_log.log",
        "q.log",
        "q2.log",
        "query.log",
        "quickstart.log",
        "rails_1x.log",
        "rails_22.log",
        "rails_22_cached.log",
        "rails_unordered.log",
        "rake.log",
        "rapport.log",
        "raw.log",
        "rc.log",
        "readme.log",
        "redis.log",
        "ref.log",
        "refman.log",
        "release.log",
        "report.log",
        "reporter.log",
        "reports.log",
        "request.log",
        "request_info.log",
        "requests.log",
        "response.log",
        "result.log",
        "results.log",
        "resume.log",
        "ro.log",
        "ro_gem.log",
        "roswell.debhelper.log",
        "rpcmetrics.log",
        "rtm.pre.log",
        "ruby_19.log",
        "run.log",
        "runme.log",
        "sImple_tracker.log",
        "saa.log",
        "sample.log",
        "sample1.log",
        "sample2.log",
        "sampledata.log",
        "sauce_connect.log",
        "sbr-test2.log",
        "sbr-test3.log",
        "sbr-test4.log",
        "script.log",
        "scss-lint.log",
        "search.log",
        "selenium-debug.log",
        "server.log",
        "servers.log",
        "service.log",
        "setup.log",
        "short.log",
        "siege.log",
        "simple.log",
        "simtrace.log",
        "simulation.log",
        "sinatra.log",
        "sixad.log",
        "size.log",
        "size1.log",
        "slides.log",
        "slow.log",
        "small.log",
        "snapdiff.log",
        "snapshot.log",
        "snep_p2p_trace.log",
        "snoopy.log",
        "soap_xml.log",
        "some.log",
        "spec.log",
        "spring-shell.log",
        "spring.log",
        "sql.log",
        "sqlnet.log",
        "sqlsn_noop.test.log",
        "sqlsn_require.test.log",
        "sqlsn_require_from_path.test.log",
        "sslstrip.log",
        "ssm.log",
        "stacktrace.log",
        "stats.log",
        "status.log",
        "stderr.log",
        "stdout.log",
        "storage/logs/laravel.log",
        "stream.log",
        "success.log",
        "supervisord.log",
        "sut.log",
        "sveditor.log",
        "synthesis.log",
        "syslog.log",
        "system.log",
        "t.log",
        "task.log",
        "tdk-bluetooth.log",
        "telegram.log",
        "temp.log",
        "temperature.log",
        "test-suite.log",
        "test.log",
        "test001.log",
        "test1.log",
        "test_01.log",
        "test_1.log",
        "test_avgQ.log",
        "test_avgR.log",
        "test_extension.log",
        "test_log.log",
        "testdb.log",
        "testlog.log",
        "testoutput_simple.3.log",
        "testrun.log",
        "tests-clean.log",
        "tests.log",
        "tex-ref.log",
        "texput.log",
        "thesis.log",
        "thin.log",
        "time.log",
        "tmp.log",
        "top.log",
        "trace.log",
        "traffic.log",
        "train.log",
        "transaction.log",
        "travis.log",
        "tree.log",
        "tutorial.log",
        "two.log",
        "txt.log",
        "uname.log",
        "unicorn.stderr.log",
        "unicorn.stdout.log",
        "unrecognized_line.log",
        "update.log",
        "uptime.log",
        "urlsnarf.log",
        "user.log",
        "users.log",
        "utc.log",
        "uwsgi.log",
        "v8.log",
        "valgrind.log",
        "validation_errors.log",
        "varnish.log",
        "velocity.log",
        "verify.log",
        "version.log",
        "voltage.log",
        "vsftpd.log",
        "warn.log",
        "warning.log",
        "warnings.log",
        "web.log",
        "webrat.log",
        "webtalk.log",
        "weechat.log",
        "weibo.log",
        "weights.log",
        "wget.log",
        "windows.log",
        "withreq.log",
        "work.log",
        "workerman.log",
        "working-access-200-404.log",
        "wp-content/debug.log",
        "x.log",
        "xaw2vhdl.log",
        "xcodebuild.log",
        "yarn-debug.log",
        "yarn-error.log",
        "zookeeper.log",
        "_debug.log",
        "kube-proxy.log",
        "etcd-events.log",
        "kube-scheduler.log",
        "kube-apiserver.log",
        "etcd.log",
        "kube-controller-manager.log",
        "kube-addon-manager.log",
        "kube-apiserver-audit.log",
        "glbc.log",
        "admin/errors.log"

given request then
    # replace the potential path with the last path
    send request called check:
        method: "GET"
        replacing path: `{regex_replace({regex_replace({base.request.url}, "^.*?\/.*?\/.*?\/", "/")}, "([^/]+)$", "")}{sensitive_path}`

    # send a random request in the hopes of effectively filtering out false positives
    send request called garbage:
        replacing path: `{garbage_path}`

    if {check.response.status_code} is "200" and
        ({check.response.headers} matches "text/plain" or
        {check.response.headers} matches ".*octet-stream.*") then
        if not({garbage.response.headers} matches "text/plain") and
            not({garbage.response.headers} matches ".*octet-stream.*") then
            # actually check the differs in the response
            if {garbage.response.body} differs from {check.response.body} then
                # make sure some HTML is not present in the response
                if not({check.response.body} matches "(?i)(\<\!doctype|\<html|\<head|\<body)") and
                    not({check.response.body} matches "(?i)(Oops!|Whoops!|AutodiscoverService|not\sfound|Request\sRejected|Access\sDenied|a\sbad\sURL|has\sbeen\slocked)") then
                    report issue and continue:
                        severity: low
                        confidence: tentative
                        detail: `{issueName} found at {check.request.url}. Manual investigation is advised`
                        remediation: `Ensure the file {sensitive_path} are not exposed from your webroot`
                end if
            end if
        end if
    end if
